<import name="title" src="../title"></import>
<import name="finish" src="../doneWork"></import>
 <import name="calendar" src="../components/calendar"></import>
  
<template>
  <div class="card-wrapper">
    <stack class="outter-wrapper">
      <div class="started" if="{{showDistribute('READY')}}">
        <div class="calendar-area">
          <calendar
            current-day="{{currentDay}}"
            calendar-array="{{calendarArray}}"
          ></calendar>
        </div>
      </div>
      <!--显示计时容器区域-->
      <stack
        class="stack-wrapper"
        if="{{showDistribute('TIMEING')}}"
        overflow="hidden"
      >
        <lottie
          class="lottie"
          source="https://lottie.host/e51ab334-555d-4580-af9b-734336f4a8a2/105hIiVzvI.json"
          id="lottie1"
          autoplay="{{true}}"
          loop="{{true}}"
          if="!showDone"
        ></lottie>
        <div class="clock-wrapper">
          <stack class="stack" onclick="handleClickToStarted">
            <div class="loop"></div>
            <canvas id="canvas-id"></canvas>
            <text class="time" if="!showDone">{{ currentTime }}</text>
          </stack>
          <!-- <div class="abandon" onclick="handleclickStop">
            <image src="../assets/images/right.png" class="right-logo" />
          </div> -->
        </div>
        <div class="done" if="showDone" @click="showDoneClick">
          <lottie
            class="lottie"
            source="https://lottie.host/4998dab0-ca0f-45eb-97ee-6e910d177faa/Fd6YAGGglB.json"
            id="lottie1"
            autoplay="{{true}}"
            loop="{{true}}"
          ></lottie>
        </div>
      </stack>
      <div class="title" @click="changeProcess">
        <image src="../assets/images/tomatos-logo.png"></image>
        <image src="../assets/images/switch.png"></image>
      </div>
    </stack>

    <!--显示完成区域-->
  </div>
</template>

<script>
import utils from '../helper/utils.js'
import initCalendar from '../utils/utils.js'
import LOG from '../utils/log.js'
import manifest from '../manifest.json'
import { getDayMonthYear, addCount } from '../utils/index.js'
import { calendarStorage, calendarGet } from '../utils/storage.js'
const CARD_STATUS = {
  READY: 1,
  UNREADY: 0,
  TIMEING: 2,
  FINISH: 3
}
export default {
  private: {
    windowWidth: 100,
    windowHeight: 100,
    ratio: 1,
    ctx: {},
    percentage: 0,
    timeout: {},
    circleX: '',
    circleY: '',
    circleR: '',
    circleAngle: Math.PI * 180,
    time: 180,
    percentageBy100: 0,
    showStatus: 1,
    currentDay: '',
    clickable: true,
    calendarArray: [],
    showDone: false,
  },
  computed: {
    currentTime() {
      let min = Math.floor(this.time / 60)
      let sec = this.time % 60
      min += ''
      sec += ''
      min = (min.length === 1) ? '0' + min : min
      sec = (sec.length === 1) ? '0' + sec : sec
      return min + ':' + sec
    },
  },
  onInit() {
    LOG(`versioncode = ${manifest.versionCode}`)
    this.timeArrayOninit()
  },
  async onShow() {
    try {
      this.currentDay = getDayMonthYear(new Date())
    }
    catch (e) {
      LOG(e,true)
    }
  },
  //数组开始初次渲染。判断本地有无缓存对象。如果没有则新创建对象。如果有则判断和当前是否同一个月
  //设置缓存。
  async timeArrayOninit() {
    try {
      const self = this
      const { data, success, error } = await calendarGet()
      //本地有缓存
      if (success && data) {
        LOG(`走了本地有缓存`)
        //判断是不是同月
        this.calendarArray = JSON.parse(data).array
        LOG(this.calendarArray)
      }
      //本地没有缓存
      else {
        LOG(`走了本地没缓存`)
        this.calendarArray = new initCalendar().array
        LOG(this.calendarArray)
      }
    }
    catch (e) {
      LOG(e,true)
    }
  },
  //点击开始计时
  async handleClickToStarted() {
    const self = this
    if (!this.clickable) {
      LOG(`为false，不重复触发`)
    }
    else {
      this.clickable = false
      LOG(`进入计时操作`)
      setTimeout(async () => {
        self.percentage = 0
        LOG(`操作开始1`)
        await this.getWidth(this.$element('canvas-id'))
        LOG(`操作开始2`)
        const canvas = this.$element('canvas-id')
        LOG(`操作开始3`)
        this.ctx = await this.adaptCanvas(canvas.getContext('2d'))
        LOG(`操作开始4`)
        await this.draw(this.ctx)
        LOG(`操作开始5`)
        this.startTime(this.ctx)
        LOG(`操作开始6`)
      }, 500)
    }

  },
  getWidth(dom) {
    const self = this
    return new Promise((resolve, reject) => {
      dom.getBoundingClientRect({
        success: function (data) {
          console.info(JSON.stringify(data))
          const { top, bottom, left, right, width, height } = data
          self.windowWidth = width
          self.windowHeight = height
          resolve()
        },
        fail: (errorData, errorCode) => {
          reject()
        },
        complete: function () {
          console.info('complete')
        }

      })
    })
  },
  async adaptCanvas(context) {
    const device = await utils.getDevice()
    context.ratio = device.screenDensity
    this.ratio = device.screenDensity
    console.info(this.ratio)
    return context
  },
  async draw(ctx) {
    try {
      // ctx.context.shadowOffsetX = 1
      ctx.beginPath()
      this.circleX = this.windowWidth / 2 / this.ratio
      this.circleY = this.windowHeight / 2 / this.ratio
      ctx.arc(this.windowWidth / 2 / this.ratio, this.windowHeight / 2 / this.ratio, 50, 0, 2 * Math.PI, false)
      ctx.lineWidth = 11 * this.ratio
      ctx.strokeStyle = '#5c6b1b'
      ctx.stroke()
      ctx.save()
    }
    catch (e) {
      console.info(e)
    }
  },
  startTime(ctx) {
    try {
        const self = this
        this.timeout = setInterval(async () => {
          LOG(`执行绘画,percentage=${self.percentage}`)
          if (self.percentage <= 100) {
            LOG(`小于百分比`)
            const startAngle = 3 / 2 * Math.PI
            const percentage = self.percentage
            self.percentage = percentage + 0.55555
            this.time = this.time === 0 ? 0 : this.time - 1
            if (this.percentage > this.percentageBy100) {
              const remainder = Math.floor(this.percentage / 1)
              if (remainder > this.percentageBy100) {
                this.percentageBy100 += 1
                const diffAngle = percentage / 100 * Math.PI * 2
                this.circleAngle = diffAngle
                ctx.beginPath()
                ctx.lineWidth = 8 * this.ratio
                ctx.arc(this.windowWidth / 2 / this.ratio, this.windowHeight / 2 / this.ratio, 50, startAngle, diffAngle + startAngle, false)
                ctx.lineCap = "round"
                ctx.strokeStyle = '#cce451'
                ctx.stroke()
                // ctx.beginPath()
                // console.info(ctx)
              }
              else { }
            }
          }
          else {
            //执行次数+1
            LOG(`执行完毕`)
            clearInterval(this.timeout)
            this.clickable = true
            this.timeout = null
            this.currentDay = getDayMonthYear(new Date())
            this.calendarArray = addCount(this.calendarArray, this.currentDay)
            self.percentage = 0
            self.time = 180
            self.circleAngle = Math.PI * 180
            self.percentageBy100 = 0
            if (this.ctx.clearRect) {
              this.ctx.clearRect(0, 0, 500, 500)            }
            await calendarStorage(JSON.stringify({
              date: '',
              array: this.calendarArray
            }))
            this.showDone = true
            // this.showStatus = CARD_STATUS['READY']
          }
        }, 1000)
      }
    catch (e) {
      console.info(e)
    }
  },
  handleclickStop() {
    this.clickable = true
    this.percentageBy100 = 0
    this.percentage = 0
    this.time = 180
    this.circleAngle = Math.PI * 180
    if (this.ctx.clearRect) {
      this.ctx.clearRect(this.windowWidth / 2 / this.ratio, this.windowHeight / 2 / this.ratio, 50, 50)
    }
    clearInterval(this.timeout)
    this.showStatus = CARD_STATUS['READY']
  },
  showDistribute(status) {
    return CARD_STATUS[status] === this.showStatus
  },
  process(process) {
    this.showStatus = process
  },
  //进行步骤
  changeProcess() {
    if (this.showStatus === 1) {
      setTimeout(() => {
        this.process(2)
      }, 500)
    }
    if (this.showStatus === 2) {
      this.clickable = true
      this.percentageBy100 = 0
      this.percentage = 0
      this.time = 180
      this.circleAngle = Math.PI * 180
      if (this.ctx.clearRect) {
        this.ctx.clearRect(0, 0, 500, 500)
      }
      clearInterval(this.timeout)
      this.showStatus = CARD_STATUS['READY']
      setTimeout(() => {
        this.process(1)
      }, 500)
    }
  },
  showDoneClick() {
    this.showDone = false
  }
}
</script>

<style lang="less">
.card-wrapper {
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center;
  background-color: #fff7e8;
  padding: 0;
}
#canvas-id {
  width: 152dp;
  height: 152dp;
}
.loop {
  width: 110dp;
  height: 110dp;
  border-radius: 50%;
  background-color: #5c6b1b;
}
.stack {
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}
.time {
  font-size: 22dp;
  font-weight: bold;
  color: white;
}
.started {
  width: 100%;
  height: 100%;
  flex: 1;
  justify-content: center;
  align-items: center;
  padding-bottom: 8dp;
  padding-left: 8dp;
  padding-right: 8dp;
  .blank {
    /* width: 80dp; */
    height: 100%;
    flex: 1;
    stack {
      width: 100%;
      height: 100%;
      justify-content: center;
      align-items: center;
    }
    image {
      width: 80dp;
      height: 80dp;
    }
    text {
      font-size: 16dp;
      color: #fff;
    }
  }
  .calendar-area {
    margin-top: 36dp;
    padding: 10dp;
    flex: 1;
    height: 80%;
    width: 100%;
    background-color: #ff9a2e;
    border-radius: 12dp;
  }
}
.button-wrap {
  width: 120dp;
  height: 120dp;
  border-radius: 50%;
  border: 10dp 1px solid white;
  background-color: #6adfb9;
  display: flex;
  justify-content: center;
  align-items: center;
}
.button-started {
  font-size: 20dp;
  color: white;
  height: 20dp;
  font-weight: bold;
}
.clock-wrapper {
  width: 100%;
  height: 100%;
  flex: 1;
  justify-content: center;
  align-items: center;
  .abandon {
    border-radius: 10dp;
    background-color: #f6cb9c;
    padding: 6dp 10dp;
    margin-left: 40dp;
    margin-right: 40dp;
    justify-content: center;
    align-items: center;
    height: 100dp;
    text {
      font-size: 25dp;
      font-weight: bold;
      color: #cf461d;
    }
    .right-logo {
      width: 40dp;
      height: 40dp;
    }
  }
}
.title {
  height: 30dp;
  width: 100%;
}
.outter-wrapper {
  width: 100%;
  height: 100%;
  .title {
    width: 100%;
    height: 36dp;
    justify-content: space-between;
    align-items: center;
    padding-left: 8dp;
    padding-right: 8dp;
    image {
      width: 16dp;
      object-fit: contain;
      height: 16dp;
    }
  }
}
.stack-wrapper {
  overflow: hidden;
  .lottie {
    width: 100%;
    height: 100%;
  }
  .done {
    width: 100%;
    height: 100%;
    flex-direction: column;
    justify-content: flex-end;
    background-color: #fff;
    .lottie {
      width: 100%;
      height: 100%;
    }
  }
}
</style>
